buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:3.5.0"
  }
}

apply from: "configuration.gradle"

configure(allprojects) {
  version = cfgVersion
}

configure(javaProjects) {

  apply plugin: "java"
  apply plugin: "eclipse"
  apply plugin: "osgi"
  apply plugin: "maven"
  apply plugin: "biz.aQute.bnd.builder"

  group = cfgGroup

  if (!project.properties.containsKey('cfgJavaVersion')) {
    project.ext {
      cfgJavaVersion = '1.8'
    }
  }

  sourceCompatibility = cfgJavaVersion
  targetCompatibility = cfgJavaVersion

  repositories {
    mavenCentral()
    mavenLocal()
  }

  sourceSets {
    sample
    itest {
      compileClasspath += sourceSets.main.runtimeClasspath
    }
  }

  configurations {
    jacoco
    jacocoRuntime
  }

  dependencies {
    testCompile group: "junit", name: "junit", version: "4.12"
    itestCompile group: "junit", name: "junit", version: "4.12"

    jacoco group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.7.9', classifier: 'nodeps'
    jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.7.9', classifier: 'runtime'
  }

  jar {
    manifest {
      version = project.version.replace("-",".");
    }
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
  }

  task instrument {
    ext.outputDir = buildDir.path + '/classes-instrumented'
    doLast {
      ant.taskdef(name: 'instrument',
                  classname: 'org.jacoco.ant.InstrumentTask',
                  classpath: configurations.jacoco.asPath)
      

      sourceSets.main.output.classesDirs.each{ f ->
        // Copy directories from main source to instrumented path
	    copy {
		  from f
		  into buildDir.path + '/instrumented_classes'
	    }
      }

      ant.instrument(destdir: outputDir) {
        fileset(dir: buildDir.path + '/instrumented_classes')
      }
    }
  }

  instrument.dependsOn classes

  gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(instrument)) {
      tasks.withType(Test) {
        doFirst {
          systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/tests.exec'
          classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
        }
      }
    }
  }

  task report {
    doLast {
      if (!file(buildDir.path + '/jacoco/tests.exec').exists()) {
        return;
      }
      ant.taskdef(name: 'report',
                  classname: 'org.jacoco.ant.ReportTask',
                  classpath: configurations.jacoco.asPath)
      ant.report() {
        executiondata {
          ant.file(file: buildDir.path + '/jacoco/tests.exec')
        }
        structure(name: 'Example') {
           classfiles {
             fileset(dir: buildDir.path + '/instrumented_classes')
           }
           sourcefiles {
             fileset(dir: 'src/main/java')
           }
        }
        html(destdir: buildDir.path + '/reports/jacoco')
    }
    }
  }

  report.dependsOn instrument
  report.dependsOn test

  task jarAll(type: Copy) {
    dependsOn(configurations.default.getAllArtifacts().getBuildDependencies())

    // Include the jar file created, as well as all artifacts:
    from configurations.default.getAllArtifacts().getFiles()
    from sourcesJar
    from javadocJar

    if (cfgCopyDependencies) {
      // Includes all the dependencies:
      from configurations.default
    }
    into rootDir.getPath() + "/build/libs"
  }

  build.dependsOn {jarAll}

  eclipse.pathVariables([GRADLE_USER_HOME:file(gradle.gradleUserHomeDir)])
  tasks.eclipse.dependsOn(cleanEclipse)

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  javadoc {
    exclude "**/internal/**"
    exclude "**/java-gen/**"
    exclude "**/app/**"
  }
}

task javadocClean(type: Delete) {
  delete rootDir.getPath() + "/docs/javadoc"
}

task javadocAll(type: Javadoc) {
  dependsOn(javadocClean)
  source docProjects.collect {
    project -> project.sourceSets.main.allJava
  }
  exclude "**/internal/**"
  exclude "**/java-gen/**"
  exclude "**/app/**"

  destinationDir = new File(rootDir, "docs/javadoc")

  classpath = files(distributionProjects.collect { project ->
    project.sourceSets.main.compileClasspath })

  classpath += files(distributionProjects.collect { project ->
    project.sourceSets.main.output })
}

task (tar, type: Tar) {
  archiveName = project.name + "-" + project.version + ".tar.gz"
  compression = Compression.GZIP
  destinationDir = file("build/distributions/")
}

task release {
  dependsOn(distributionProjects.build)
  dependsOn(javadocAll)
  dependsOn(tar)
}

subprojects {
  task allDeps(type: DependencyReportTask) {}
}
